DROP TABLE IF EXISTS REVIEW_LIKE;
DROP TABLE IF EXISTS REVIEW;
DROP TABLE IF EXISTS film_directors;
DROP TABLE IF EXISTS directors;
DROP TABLE IF EXISTS likes;
DROP TABLE IF EXISTS film_genre;
DROP TABLE IF EXISTS genre;
DROP TABLE IF EXISTS friendship;
DROP TABLE IF EXISTS films;
DROP TABLE IF EXISTS mpa;
DROP TABLE IF EXISTS users;

CREATE TABLE IF NOT EXISTS users (
    user_id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    login VARCHAR(255) NOT NULL,
    birthday DATE NOT NULL,
    email VARCHAR(255) NOT NULL,
    name VARCHAR(255) NOT NULL,
    UNIQUE (email)
);

CREATE TABLE IF NOT EXISTS mpa (
    mpa_id INT PRIMARY KEY,
    mpa_name VARCHAR(50) NOT NULL UNIQUE
);

CREATE TABLE IF NOT EXISTS films (
    film_id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    films_name VARCHAR(255) NOT NULL,
    description TEXT NOT NULL,
    release_date DATE NOT NULL,
    duration INT NOT NULL,
    mpa_id INT REFERENCES mpa(mpa_id) ON DELETE RESTRICT
);

CREATE TABLE IF NOT EXISTS friendship (
    user_id INT REFERENCES users(user_id) ON DELETE CASCADE,
    friend_id INT REFERENCES users(user_id) ON DELETE CASCADE,
    PRIMARY KEY (user_id, friend_id),
    CHECK (user_id != friend_id)
);

CREATE TABLE IF NOT EXISTS genre (
    genre_id int PRIMARY KEY,
    genre_name VARCHAR(50) NOT NULL UNIQUE
);

CREATE TABLE IF NOT EXISTS film_genre (
    film_id INT REFERENCES films(film_id) ON DELETE CASCADE,
    genre_id INT REFERENCES genre(genre_id) ON DELETE RESTRICT,
    PRIMARY KEY (film_id, genre_id)
);

CREATE TABLE IF NOT EXISTS likes (
    film_id INT REFERENCES films(film_id) ON DELETE CASCADE,
    user_id INT REFERENCES users(user_id) ON DELETE CASCADE,
    PRIMARY KEY (film_id, user_id)
);

CREATE TABLE IF NOT EXISTS directors (
    director_id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    director_name VARCHAR(255) NOT NULL
);

CREATE TABLE IF NOT EXISTS film_directors (
    film_id INT REFERENCES films(film_id) ON DELETE CASCADE,
    director_id INT REFERENCES directors(director_id) ON DELETE CASCADE,
    PRIMARY KEY (film_id, director_id)
);

-- Отзывы на фильм
CREATE TABLE IF NOT EXISTS REVIEW (
	REVIEW_ID SERIAL PRIMARY KEY,
	CONTENT CHARACTER VARYING NOT NULL,
	FILM_ID INTEGER NOT NULL,
	USER_ID INTEGER NOT NULL,
	IS_POSITIVE BOOLEAN,
	CONSTRAINT unique_review_film_user UNIQUE(FILM_ID, USER_ID),
	FOREIGN KEY (USER_ID) REFERENCES USERS(USER_ID),
	FOREIGN KEY (FILM_ID) REFERENCES FILMS(FILM_ID)
	);

-- Лайки для отзывов
CREATE TABLE IF NOT EXISTS REVIEW_LIKE (
	REVIEW_ID INTEGER NOT NULL,
	USER_ID INTEGER NOT NULL,
	SCORE INTEGER,
	CONSTRAINT unique_review_like UNIQUE(REVIEW_ID, USER_ID),
	CONSTRAINT CONSTRAINT_REVIEW_ID_FK FOREIGN KEY (REVIEW_ID) REFERENCES PUBLIC.REVIEW(REVIEW_ID) ON DELETE CASCADE,
	CONSTRAINT CONSTRAINT_USER_ID_FK FOREIGN KEY (USER_ID) REFERENCES PUBLIC.USERS(USER_ID)
);